//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""11b214ca-9989-49c8-9cbd-ae602d096597"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""960c89c1-dec0-4a1c-9d96-53c5851da7c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4c937779-ad70-4bf6-a1be-88565b32198f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Value"",
                    ""id"": ""600660b1-5390-4640-a355-59ba27ca9d23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""db64d9d9-ea3a-4719-a1b1-0a769cab3fc6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f66e838c-50f6-4b82-9b68-447235b2f312"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4da53f4-3a23-4818-bc52-2512c46418d0"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46fc0ced-ff94-4efd-90a6-61b98d574e98"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cdcba7c-1a77-443c-8ad3-4dbce04ba5a2"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""70c2a9b3-a8b3-4bf9-9afc-c977d0e2f3c1"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""de35c520-4704-4b69-8d55-a5f1aa2356e8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""87e5ef08-a7b4-4797-85bf-67ee8dc389f5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""76dd8b17-ea41-4a80-9270-dd3958942898"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f2c26551-ca91-401c-af88-a50ec19ced3c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""43b1f355-db46-4e53-a1e7-48affde00f37"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e65b88b4-0482-41c1-b5c6-dd77d5f4f553"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b1db3465-39fc-4cd0-9a94-46b5f244708f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""29ffa406-3adc-4f16-8534-81fc62ad21c6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5fe4c520-f74f-4c8c-8c18-5f6e09cafa0d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b8c48c5a-c01c-4262-abd6-59cc948dde96"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Global"",
            ""id"": ""969ae551-9a93-4752-bdc1-39de3a7add2d"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""3ecd22e9-f5bf-4c20-977d-9bb6e425d8a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""select_up"",
                    ""type"": ""Button"",
                    ""id"": ""f2eb0f2e-fcc2-47ce-a554-a79b72689282"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""select_down"",
                    ""type"": ""Button"",
                    ""id"": ""fc49b8e6-5e43-408a-88f8-4f7e8b375aab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""select_left"",
                    ""type"": ""Button"",
                    ""id"": ""77086ac7-33b2-4579-b49f-465a66112e23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""select_right"",
                    ""type"": ""Button"",
                    ""id"": ""14cb1c78-cfc7-40db-804a-22ca1ab94d69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""select_enter"",
                    ""type"": ""Button"",
                    ""id"": ""7a3ee22d-eee8-45e1-a567-effbbec2cf7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""select_escape"",
                    ""type"": ""Button"",
                    ""id"": ""3a8da39e-b34c-492d-b3c9-cc0f1be75bd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8a2e123-d4e4-4c31-9994-3cf2a1cfac3a"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c06a028-4639-42b1-a490-7f75a195d8db"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select_up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c9de1ae-1527-4e56-a657-08edb14ba56b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select_down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0030fb9-0203-4804-8add-52040d85c0a1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select_left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4842877d-11bc-4c66-a9c5-103fdf834132"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select_right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deaae78f-c313-47b9-aa74-776ab440d813"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select_enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ec1c045-8eb5-4617-b1a0-ba461feda75a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select_escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""debug"",
            ""id"": ""a103cb8a-5021-416e-af7c-cb89fd41c555"",
            ""actions"": [
                {
                    ""name"": ""teleport_to_point"",
                    ""type"": ""Button"",
                    ""id"": ""e9d65312-ae41-47a3-be0b-47955236dbcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""spawn_gun"",
                    ""type"": ""Button"",
                    ""id"": ""83f6d20a-a612-4f09-a0f6-d1245edb37b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""teleport_to_ending"",
                    ""type"": ""Button"",
                    ""id"": ""2a68c729-3c6e-483b-bae0-73bf9611f44d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9dd58a5e-b7fa-4876-8a84-8491ab71287a"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""teleport_to_point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a45bcecb-fd96-4346-bed6-0f51fd3be9a7"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""spawn_gun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5a8f696-e19e-4d19-95cf-16d9049eb925"",
                    ""path"": ""<Keyboard>/f10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""teleport_to_ending"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Fire = m_Player.FindAction("Fire", throwIfNotFound: true);
        m_Player_Restart = m_Player.FindAction("Restart", throwIfNotFound: true);
        // Global
        m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
        m_Global_Pause = m_Global.FindAction("Pause", throwIfNotFound: true);
        m_Global_select_up = m_Global.FindAction("select_up", throwIfNotFound: true);
        m_Global_select_down = m_Global.FindAction("select_down", throwIfNotFound: true);
        m_Global_select_left = m_Global.FindAction("select_left", throwIfNotFound: true);
        m_Global_select_right = m_Global.FindAction("select_right", throwIfNotFound: true);
        m_Global_select_enter = m_Global.FindAction("select_enter", throwIfNotFound: true);
        m_Global_select_escape = m_Global.FindAction("select_escape", throwIfNotFound: true);
        // debug
        m_debug = asset.FindActionMap("debug", throwIfNotFound: true);
        m_debug_teleport_to_point = m_debug.FindAction("teleport_to_point", throwIfNotFound: true);
        m_debug_spawn_gun = m_debug.FindAction("spawn_gun", throwIfNotFound: true);
        m_debug_teleport_to_ending = m_debug.FindAction("teleport_to_ending", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Fire;
    private readonly InputAction m_Player_Restart;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Fire => m_Wrapper.m_Player_Fire;
        public InputAction @Restart => m_Wrapper.m_Player_Restart;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Global
    private readonly InputActionMap m_Global;
    private List<IGlobalActions> m_GlobalActionsCallbackInterfaces = new List<IGlobalActions>();
    private readonly InputAction m_Global_Pause;
    private readonly InputAction m_Global_select_up;
    private readonly InputAction m_Global_select_down;
    private readonly InputAction m_Global_select_left;
    private readonly InputAction m_Global_select_right;
    private readonly InputAction m_Global_select_enter;
    private readonly InputAction m_Global_select_escape;
    public struct GlobalActions
    {
        private @Controls m_Wrapper;
        public GlobalActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Global_Pause;
        public InputAction @select_up => m_Wrapper.m_Global_select_up;
        public InputAction @select_down => m_Wrapper.m_Global_select_down;
        public InputAction @select_left => m_Wrapper.m_Global_select_left;
        public InputAction @select_right => m_Wrapper.m_Global_select_right;
        public InputAction @select_enter => m_Wrapper.m_Global_select_enter;
        public InputAction @select_escape => m_Wrapper.m_Global_select_escape;
        public InputActionMap Get() { return m_Wrapper.m_Global; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
        public void AddCallbacks(IGlobalActions instance)
        {
            if (instance == null || m_Wrapper.m_GlobalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @select_up.started += instance.OnSelect_up;
            @select_up.performed += instance.OnSelect_up;
            @select_up.canceled += instance.OnSelect_up;
            @select_down.started += instance.OnSelect_down;
            @select_down.performed += instance.OnSelect_down;
            @select_down.canceled += instance.OnSelect_down;
            @select_left.started += instance.OnSelect_left;
            @select_left.performed += instance.OnSelect_left;
            @select_left.canceled += instance.OnSelect_left;
            @select_right.started += instance.OnSelect_right;
            @select_right.performed += instance.OnSelect_right;
            @select_right.canceled += instance.OnSelect_right;
            @select_enter.started += instance.OnSelect_enter;
            @select_enter.performed += instance.OnSelect_enter;
            @select_enter.canceled += instance.OnSelect_enter;
            @select_escape.started += instance.OnSelect_escape;
            @select_escape.performed += instance.OnSelect_escape;
            @select_escape.canceled += instance.OnSelect_escape;
        }

        private void UnregisterCallbacks(IGlobalActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @select_up.started -= instance.OnSelect_up;
            @select_up.performed -= instance.OnSelect_up;
            @select_up.canceled -= instance.OnSelect_up;
            @select_down.started -= instance.OnSelect_down;
            @select_down.performed -= instance.OnSelect_down;
            @select_down.canceled -= instance.OnSelect_down;
            @select_left.started -= instance.OnSelect_left;
            @select_left.performed -= instance.OnSelect_left;
            @select_left.canceled -= instance.OnSelect_left;
            @select_right.started -= instance.OnSelect_right;
            @select_right.performed -= instance.OnSelect_right;
            @select_right.canceled -= instance.OnSelect_right;
            @select_enter.started -= instance.OnSelect_enter;
            @select_enter.performed -= instance.OnSelect_enter;
            @select_enter.canceled -= instance.OnSelect_enter;
            @select_escape.started -= instance.OnSelect_escape;
            @select_escape.performed -= instance.OnSelect_escape;
            @select_escape.canceled -= instance.OnSelect_escape;
        }

        public void RemoveCallbacks(IGlobalActions instance)
        {
            if (m_Wrapper.m_GlobalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGlobalActions instance)
        {
            foreach (var item in m_Wrapper.m_GlobalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GlobalActions @Global => new GlobalActions(this);

    // debug
    private readonly InputActionMap m_debug;
    private List<IDebugActions> m_DebugActionsCallbackInterfaces = new List<IDebugActions>();
    private readonly InputAction m_debug_teleport_to_point;
    private readonly InputAction m_debug_spawn_gun;
    private readonly InputAction m_debug_teleport_to_ending;
    public struct DebugActions
    {
        private @Controls m_Wrapper;
        public DebugActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @teleport_to_point => m_Wrapper.m_debug_teleport_to_point;
        public InputAction @spawn_gun => m_Wrapper.m_debug_spawn_gun;
        public InputAction @teleport_to_ending => m_Wrapper.m_debug_teleport_to_ending;
        public InputActionMap Get() { return m_Wrapper.m_debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionsCallbackInterfaces.Add(instance);
            @teleport_to_point.started += instance.OnTeleport_to_point;
            @teleport_to_point.performed += instance.OnTeleport_to_point;
            @teleport_to_point.canceled += instance.OnTeleport_to_point;
            @spawn_gun.started += instance.OnSpawn_gun;
            @spawn_gun.performed += instance.OnSpawn_gun;
            @spawn_gun.canceled += instance.OnSpawn_gun;
            @teleport_to_ending.started += instance.OnTeleport_to_ending;
            @teleport_to_ending.performed += instance.OnTeleport_to_ending;
            @teleport_to_ending.canceled += instance.OnTeleport_to_ending;
        }

        private void UnregisterCallbacks(IDebugActions instance)
        {
            @teleport_to_point.started -= instance.OnTeleport_to_point;
            @teleport_to_point.performed -= instance.OnTeleport_to_point;
            @teleport_to_point.canceled -= instance.OnTeleport_to_point;
            @spawn_gun.started -= instance.OnSpawn_gun;
            @spawn_gun.performed -= instance.OnSpawn_gun;
            @spawn_gun.canceled -= instance.OnSpawn_gun;
            @teleport_to_ending.started -= instance.OnTeleport_to_ending;
            @teleport_to_ending.performed -= instance.OnTeleport_to_ending;
            @teleport_to_ending.canceled -= instance.OnTeleport_to_ending;
        }

        public void RemoveCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActions @debug => new DebugActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
    }
    public interface IGlobalActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnSelect_up(InputAction.CallbackContext context);
        void OnSelect_down(InputAction.CallbackContext context);
        void OnSelect_left(InputAction.CallbackContext context);
        void OnSelect_right(InputAction.CallbackContext context);
        void OnSelect_enter(InputAction.CallbackContext context);
        void OnSelect_escape(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnTeleport_to_point(InputAction.CallbackContext context);
        void OnSpawn_gun(InputAction.CallbackContext context);
        void OnTeleport_to_ending(InputAction.CallbackContext context);
    }
}
